hist(logisRegression(1000),freq = FALSE)
grid.arrange(plot_den1,plot_den2)
grid.arrange(plot_den1,plot_den2)
library(LaplacesDemon)
library(ggplot2)
library(bayesutils)
library(gridExtra)
set.seed(123456)
data <- as.data.frame(readRDS("Precipitation.rds"))
n <- nrow(data)
names(data) <- c("precipitation")
v_0 <- 1
sigma_0 <- var(data$precipitation)
sigma <- sigma_0
tau_0 <- 1
mu_0 <- mean(data$precipitation)
mu <- rnorm(n = 1, mean = mu_0, tau_0)
nDraws <- 1000
Gibbs1 <- data.frame("mu" = numeric(), "sigma2" = numeric())
Gibbs2 <- data.frame("mu" = numeric(), "sigma2" = numeric())
mean_vec <- vector(mode = "numeric", length = nDraws)
variance_vec <- vector(mode = "numeric", length = nDraws)
for(i in 1:nDraws){
w <- (n/sigma)/((n/sigma) + (1/tau_0))
mu_n <- w * mean(data$precipitation) + (1 - w) * mu_0
tau_n <- 1 / (n/sigma + 1/tau_0)
mu <- rnorm(n = 1, mean = mu_n, sd = tau_n)
old_sigma <- sigma
v_n <- v_0 + n
second_term <- (v_0 * sigma_0 + sum((data$precipitation - mu)^2))/ (n + v_0)
sigma <- rinvchisq(n = 1, df = v_n, scale = second_term)
Gibbs2 <- rbind(Gibbs2, data.frame(mu, sigma))
if(i==1){
sampling <- data.frame("mu" = mu, "sigma" = sigma)
}else{
sampling <- data.frame("mu" = c(mu, mu), "sigma" = c(old_sigma, sigma))
}
Gibbs1 <- rbind(Gibbs1, sampling)
}
a_Gibbs <- acf(Gibbs2[,1])
IF_Gibbs <- 1+2*sum(a_Gibbs$acf[-1])
print(paste0("Inefficiency factors:",IF_Gibbs))
trace_mu <-plot(1:nDraws, Gibbs2[,1], type = "l",col="red") # traceplot of Gibbs draws
trace_sigma <-plot(1:nDraws, Gibbs2[,2], type = "l",col="red") # traceplot of Gibbs draws
plot_hist <- hist(Gibbs2[,1],col="red") # histogram of Gibbs draws
trajectories <- list(Gibbs1,Gibbs2)
plot_mcmc_path(trajectories,
xlim = c(7.7, 8.0), ylim = c(90, 105),
xlab = expression(mu[1]),
ylab = expression(sigma[2]),
main = "Steps of cycles of each chain")
k <- as.data.frame(trajectories[2])
colnames(k) <- c("y1","y2")
plot_den1 <- ggplot(data = k, aes_string(x=k$y1))+
geom_histogram(aes(y=..density..),
colour = "Blue",
fill = "White",
bins = 30)+
geom_density(alpha=.2, fill = "#FF6666")+
ggtitle("y1")
plot_den2 <- ggplot(data = k, aes_string(x=k$y2))+
geom_histogram(aes(y=..density..),
colour = "Blue",
fill = "White",
bins = 30)+
geom_density(alpha=.2, fill = "#FF6666")+
ggtitle("y2")
grid.arrange(plot_den1,plot_den2)
AR1 <- function(phi, t =300, mu=13, sigma=3){
b <- c()
b[1] <- mu
for (i in 2:t) {
b[i] <- mu + phi*(b[i-1]-mu) + rnorm(1, 0, sqrt(sigma))
}
b
}
it <- 1:300
phis <- c(-1, 0, 1)
plot.3a <- lapply(phis, function(phi){
b <- AR1(phi = phi)
title <- paste0("phi = ",phi)
stan_data <- data.frame(it = it, b=b)
ggplot(stan_data) +
geom_line(aes(x=it, y=b)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.a))
AR1 <- function(phi, t =300, mu=13, sigma=3){
b <- c()
b[1] <- mu
for (i in 2:t) {
b[i] <- mu + phi*(b[i-1]-mu) + rnorm(1, 0, sqrt(sigma))
}
b
}
it <- 1:300
phis <- c(-1, 0, 1)
plot.3a <- lapply(phis, function(phi){
b <- AR1(phi = phi)
title <- paste0("phi = ",phi)
stan_data <- data.frame(it = it, b=b)
ggplot(stan_data) +
geom_line(aes(x=it, y=b)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.3a))
# Chunk 1
# Chunk 2
plot(cars)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
set.seed(1234)
x <- AR1(phi=0.2)
y <- AR1(phi=0.95)
N = 300
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
model1 <- stan(model_code = StanModel,
data = list(N=N, x=x),
chains = 4,
warmup = 1000,
it = 2000,
refresh = 0)
AR1 <- function(phi, t =300, mu=13, sigma=3){
b <- c()
b[1] <- mu
for (i in 2:t) {
b[i] <- mu + phi*(b[i-1]-mu) + rnorm(1, 0, sqrt(sigma))
}
b
}
it <- 1:300
phis <- c(-1, 0, 1)
plot.3a <- lapply(phis, function(phi){
b <- AR1(phi = phi)
title <- paste0("phi = ",phi)
stan_data <- data.frame(it = it, b=b)
ggplot(stan_data) +
geom_line(aes(x=it, y=b)) +
ggtitle(title)
})
library(LaplacesDemon)
library(ggplot2)
library(bayesutils)
library(gridExtra)
library(rstan)
set.seed(123456)
data <- data.frame(readRDS("Precipitation.rds"))
data <- log(data)
n <- nrow(data)
names(data) <- c("precipitation")
v_0 <- 1
sigma_0 <- var(data$precipitation)
sigma <- sigma_0
tau_0 <- 1
mu_0 <- mean(data$precipitation)
mu <- rnorm(n = 1, mean = mu_0, tau_0)
nDraws <- 1000
Gibbs1 <- data.frame("mu" = numeric(), "sigma" = numeric())
Gibbs2 <- data.frame("mu" = numeric(), "sigma" = numeric())
mean_vec <- vector(mode = "numeric", length = nDraws)
variance_vec <- vector(mode = "numeric", length = nDraws)
for(i in 1:nDraws){
w <- (n/sigma)/((n/sigma) + (1/tau_0))
mu_n <- w * mean(data$precipitation) + (1 - w) * mu_0
tau_n <- 1 / (n/sigma + 1/tau_0)
mu <- rnorm(n = 1, mean = mu_n, sd = tau_n)
old_sigma <- sigma
v_n <- v_0 + n
second_term <- (v_0 * sigma_0 + sum((data$precipitation - mu)^2))/ (n + v_0)
sigma <- rinvchisq(n = 1, df = v_n, scale = second_term)
Gibbs2 <- rbind(Gibbs2, data.frame(mu, sigma))
if(i==1){
sampling <- data.frame("mu" = mu, "sigma" = sigma)
}else{
sampling <- data.frame("mu" = c(mu, mu), "sigma" = c(old_sigma, sigma))
}
Gibbs1 <- rbind(Gibbs1, sampling)
}
#Question 1b
par(mfrow=c(2,2))
a_Gibbs_1 <- acf(Gibbs1[,1],plot = FALSE)
IF_Gibbs_1 <- 1+2*sum(a_Gibbs_1$acf)
a_Gibbs_2 <- acf(Gibbs1[,2],plot = FALSE)
IF_Gibbs_2 <- 1+2*sum(a_Gibbs_2$acf)
print(paste0("Inefficiency factors for mean:",round(IF_Gibbs_1,digits = 3)))
print(paste0("Inefficiency factors for sigma:",round(IF_Gibbs_2,digits = 3)))
plot(1:nDraws, Gibbs2[,1], type = "l",col="red",main = "Traceplot mu")
plot(1:nDraws, Gibbs2[,2], type = "l",col="red",main = "Traceplot sigma")
hist(Gibbs1[,1],col="red",main = "kernel density")
AR1 <- function(phi, t =300, mu=13, sigma=3){
b <- c()
b[1] <- mu
for (i in 2:t) {
b[i] <- mu + phi*(b[i-1]-mu) + rnorm(1, 0, sqrt(sigma))
}
b
}
it <- 1:300
phis <- c(-1, 0, 1)
plot.3a <- lapply(phis, function(phi){
b <- AR1(phi = phi)
title <- paste0("phi = ",phi)
stan_data <- data.frame(it = it, b=b)
ggplot(stan_data) +
geom_line(aes(x=it, y=b)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.3a))
setwd("~/LIU/BigData Analytics/Git Labs/bigdata/lab3-ml/kernel_values")
knitr::opts_chunk$set(echo = TRUE)
h_distance = 150
h_days = 100
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile_a01)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
h_distance = 150
h_days = 100
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
View(Data)
h_distance = 150
h_days = 100
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)Ë†2),
h_distance = 150
h_days = 100
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_date)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 150
h_days = 100
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 150
h_days = 1000
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 100
h_days = 500
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 100
h_days = 100
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 100
h_days = 50
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 150
h_days = 1000
Data <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(Data[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(Data[i],header = FALSE, sep = ","))
Data2 <- rbind(Data2,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
h_distance = 150
h_days = 1000
Data <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
h_distance = 100
h_days = 50
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
data_sum <- data.frame(times =c("04:00:00","06:00:00","08:00:00",                           "10:00:00","12:00:00","14:00:00","16:00:00","18:00:00","20:00:00","22:00:00","00:00:00"),
predictions = c(3.696250976132099, 3.6397725698648054,  4.27492877896444,
5.2951841336254315, 6.300181847439305, 6.605957535647397,
6.483739105179379,  5.619149929427509, 5.2776748871799395,
4.733071911757403, 4.073633050827442))
data_sum
plot(as.POSIXct(data_sum$times, format = "%H:%M:%OS"), data_sum$predictions,
type = "l",xlab = "Time", ylab = "Temperature",ylim = c(min(data_sum[,2]),
max(data_sum[,2])),col = "red",main = "KernelSum")
points(as.POSIXct(data_sum$times, format = "%H:%M:%OS"),
data_sum$predictions,pch = 16, col = "Blue")
data_sum <- data.frame(times =c("00:00:00","04:00:00","06:00:00","08:00:00",                           "10:00:00","12:00:00","14:00:00","16:00:00","18:00:00","20:00:00","22:00:00"),
predictions = c( 3.6397725698648054,  4.27492877896444,
5.2951841336254315, 6.300181847439305, 6.605957535647397,
6.483739105179379,  5.619149929427509, 5.2776748871799395,
4.733071911757403, 4.073633050827442,3.696250976132099))
data_sum
plot(as.POSIXct(data_sum$times, format = "%H:%M:%OS"), data_sum$predictions,
type = "l",xlab = "Time", ylab = "Temperature",ylim = c(min(data_sum[,2]),
max(data_sum[,2])),col = "red",main = "KernelSum")
points(as.POSIXct(data_sum$times, format = "%H:%M:%OS"),
data_sum$predictions,pch = 16, col = "Blue")
data_product <- data.frame(times =c("00:00:00","04:00:00","06:00:00","08:00:00",                           "10:00:00","12:00:00","14:00:00","16:00:00","18:00:00","20:00:00","22:00:00"),
predictions = c(6.540295379461025,  6.498088321276106,
7.07387731174095,  8.311025849587462, 9.455094009380298,
9.89472231383631,  9.491000342379294, 8.354457076955809,
7.705096783192724, 7.240888978889001, 6.897533656906103))
data_product
plot(as.POSIXct(data_product$times, format = "%H:%M:%OS"), data_product$predictions,
type = "l",xlab = "Time", ylab = "Temperature",ylim = c(min(data_sum[,2]),
max(data_sum[,2])),col = "red",main = "KernelSum")
points(as.POSIXct(data_product$times, format = "%H:%M:%OS"),
data_product$predictions,pch = 16, col = "Blue")
data_product <- data.frame(times =c("00:00:00","04:00:00","06:00:00","08:00:00",                           "10:00:00","12:00:00","14:00:00","16:00:00","18:00:00","20:00:00","22:00:00"),
predictions = c(6.540295379461025,  6.498088321276106,
7.07387731174095,  8.311025849587462, 9.455094009380298,
9.89472231383631,  9.491000342379294, 8.354457076955809,
7.705096783192724, 7.240888978889001, 6.897533656906103))
data_product
plot(as.POSIXct(data_product$times, format = "%H:%M:%OS"), data_product$predictions,
type = "l",xlab = "Time", ylab = "Temperature",ylim = c(min(data_product[,2]),
max(data_product[,2])),col = "red",main = "KernelSum")
points(as.POSIXct(data_product$times, format = "%H:%M:%OS"),
data_product$predictions,pch = 16, col = "Blue")
h_distance = 150
h_days = 1000
Data <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(Data)){
if(i==1){
assign(paste0("Data"), read.table(Data[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(Data[i],header = FALSE, sep = ","))
Data2 <- rbind(Data2,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
h_distance = 150
h_days = 1000
Data <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(Data)){
if(i==1){
assign(paste0("Data"), read.table(Data[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(Data[i],header = FALSE, sep = ","))
Data2 <- rbind(Data2,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
h_distance = 150
h_days = 1000
listfile <- list.files(pattern = "part-*",full.names = T, recursive = TRUE)
for (i in 1:length(listfile)){
if(i==1){
assign(paste0("Data"), read.table(listfile[i],header = FALSE, sep = ","))
}
if(!i==1){
assign(paste0("Test",i), read.table(listfile[i],header = FALSE, sep = ","))
Data <- rbind(Data,get(paste0("Test",i)))
rm(list = ls(pattern = "Test"))
}
}
plot((seq(min(Data$V1):max(Data$V1)) / 1000),
exp(-(seq(min(Data$V1):max(Data$V1)) / h_distance)^2),
type = "l", xlab = "Distance in kilometers", ylab = "Kernel value")
plot(seq(min(Data$V2):max(Data$V2)),
exp(-(seq(min(Data$V2):max(Data$V2)) / h_days)^2),
type = "l", xlab = "Date difference in days", ylab = "Kernel value")
